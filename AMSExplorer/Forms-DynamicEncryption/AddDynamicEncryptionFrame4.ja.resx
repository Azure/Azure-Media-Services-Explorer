<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="buttonOk.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="buttonCancel.Text" xml:space="preserve">
    <value>キャンセル</value>
  </data>
  <data name="groupBoxAuthPol.Text" xml:space="preserve">
    <value>コンテンツ鍵承認ポリシーのオプション</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="radioButtonTokenAuthPolicy.Size" type="System.Drawing.Size, System.Drawing">
    <value>90, 19</value>
  </data>
  <data name="radioButtonTokenAuthPolicy.Text" xml:space="preserve">
    <value>トークン認証</value>
  </data>
  <data name="radioButtonOpenAuthPolicy.Size" type="System.Drawing.Size, System.Drawing">
    <value>123, 19</value>
  </data>
  <data name="radioButtonOpenAuthPolicy.Text" xml:space="preserve">
    <value>オープン (認証なし)</value>
  </data>
  <data name="label1.Size" type="System.Drawing.Size, System.Drawing">
    <value>52, 15</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>共通鍵 :</value>
  </data>
  <data name="buttongenerateContentKey.Text" xml:space="preserve">
    <value>生成</value>
  </data>
  <data name="checkBoxAddContentKeyIdentifierClaim.Size" type="System.Drawing.Size, System.Drawing">
    <value>236, 19</value>
  </data>
  <data name="checkBoxAddContentKeyIdentifierClaim.Text" xml:space="preserve">
    <value>コンテンツ鍵の Key ID クレームを追加する</value>
  </data>
  <data name="moreinfocGenX509.Size" type="System.Drawing.Size, System.Drawing">
    <value>197, 15</value>
  </data>
  <data name="moreinfocGenX509.Text" xml:space="preserve">
    <value>JWT の  X.509 証明書を作成するには</value>
  </data>
  <data name="buttonImportPFX.Text" xml:space="preserve">
    <value>X.509 証明書 (.PFX) のインポート...</value>
  </data>
  <data name="labelCertificateFile.Text" xml:space="preserve">
    <value>(ファイルが選択されていません)</value>
  </data>
  <data name="buttonDelClaim.Text" xml:space="preserve">
    <value>削除</value>
  </data>
  <data name="buttonAddClaim.Text" xml:space="preserve">
    <value>追加</value>
  </data>
  <data name="labelStep.Size" type="System.Drawing.Size, System.Drawing">
    <value>368, 42</value>
  </data>
  <data name="labelStep.Text" xml:space="preserve">
    <value>ステップ {0}
コンテンツ鍵承認ポリシーオプション #{1} for {2} の構成</value>
  </data>
  <data name="buttonAddMapping.Text" xml:space="preserve">
    <value>URL の挿入</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>OpenId を利用 (JSON Web Keys)</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>公開鍵を利用 (X.509 証明書)</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>共通鍵を利用</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>共通鍵を利用</value>
  </data>
  <data name="label11.Text" xml:space="preserve">
    <value>例 : urn:test</value>
  </data>
  <data name="label10.Text" xml:space="preserve">
    <value>例 : http://testacs.com</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>その他のクレーム :</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>動的暗号化 - ステップ {0}</value>
  </data>
  <data name="tabPageTokenType.Text" xml:space="preserve">
    <value>トークンのタイプ</value>
  </data>
  <data name="tabPageTokenSymmetric.Text" xml:space="preserve">
    <value>共通鍵方式のトークン鍵</value>
  </data>
  <data name="tabPageTokenX509.Text" xml:space="preserve">
    <value>X.509 証明書</value>
  </data>
  <data name="tabPageOpenId.Text" xml:space="preserve">
    <value>OpenID</value>
  </data>
  <data name="tabPage3.Text" xml:space="preserve">
    <value>クレーム</value>
  </data>
  <data name="tabPage2.Text" xml:space="preserve">
    <value>トークンのプロパティ</value>
  </data>
  <data name="label9.Text" xml:space="preserve">
    <value>OpenID Connect ディスカバリードキュメント: </value>
  </data>
  <data name="radioButtonJWTOpenId.Text" xml:space="preserve">
    <value>JWT - JSON Web トークン</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>発行者: </value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>オーディエンス または スコープ: </value>
  </data>
  <data name="radioButtonSWT.Text" xml:space="preserve">
    <value>SWT - Simple Web トークン</value>
  </data>
  <data name="radioButtonJWTX509.Text" xml:space="preserve">
    <value>JWT - JSON Web トークン</value>
  </data>
  <data name="radioButtonJWTSymmetric.Text" xml:space="preserve">
    <value>JWT - JSON Web トークン</value>
  </data>
  <data name="radioButtonContentKeyBase64.Text" xml:space="preserve">
    <value>Base64</value>
  </data>
  <data name="radioButtonContentKeyHex.Text" xml:space="preserve">
    <value>16進数</value>
  </data>
</root>